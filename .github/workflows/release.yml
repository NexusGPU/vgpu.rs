name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTFLAGS: "-D warnings -W unreachable-pub"
  RUSTUP_MAX_RETRIES: 10
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

jobs:
  release:
    permissions:
      #  to create release tags (cycjimmy/semantic-release-action)
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.semantic.outputs.new_release_published }}
      version: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - uses: actions/checkout@v3

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3.4.1
        with:
          semantic_version: 18
          extra_plugins: |
            @semantic-release/release-notes-generator@^10
            @semantic-release/github@^8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_libraries:
    needs: release
    if: needs.release.outputs.published == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64

    name: build_libraries (${{ matrix.target }})
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update apt repositories
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get update

      - name: Install AArch64 target toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt-get install gcc-aarch64-linux-gnu

      - name: Install CUDA toolkit
        uses: Jimver/cuda-toolkit@v0.2.19
        with:
          sub-packages: '["nvcc", "cudart-dev"]'
          method: network

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update stable
          rustup target add ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "build-${{ matrix.target }}"

      - name: Build cuda-limiter
        run: cargo build -p cuda-limiter --release --target ${{ matrix.target }}

      - name: Upload cuda-limiter artifact
        uses: actions/upload-artifact@v4
        with:
          name: libcuda_limiter-${{ matrix.platform }}
          path: target/${{ matrix.target }}/release/libcuda_limiter.so

      - name: Build add-path
        run: cargo build -p add-path --release --target ${{ matrix.target }}
  
      - name: Upload add-path artifact
        uses: actions/upload-artifact@v4
        with:
          name: libadd_path-${{ matrix.platform }}
          path: target/${{ matrix.target }}/release/libadd_path.so

  publish_libraries:
    needs: 
      - release
      - build_libraries
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Compress artifacts
        run: |
          tar -czf libcuda_limiter-x64.tar.gz -C artifacts/libcuda_limiter-linux-x64 libcuda_limiter.so
          tar -czf libcuda_limiter-arm64.tar.gz -C artifacts/libcuda_limiter-linux-arm64 libcuda_limiter.so
          tar -czf libadd_path-x64.tar.gz -C artifacts/libadd_path-linux-x64 libadd_path.so
          tar -czf libadd_path-arm64.tar.gz -C artifacts/libadd_path-linux-arm64 libadd_path.so
      
      - name: Add assets to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.release.outputs.version }}
          files: |
            libcuda_limiter-x64.tar.gz
            libcuda_limiter-arm64.tar.gz
            libadd_path-x64.tar.gz
            libadd_path-arm64.tar.gz

  publish_x86:
    needs:
      - release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    env:
      arch: amd64
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      
      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x86_64-unknown-linux-gnu

      - name: Configure cache
        uses: redstoneproject/rust-cache@master

      - name: Build for amd64
        run: cargo build --release --target x86_64-unknown-linux-gnu
      
      - id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            tensorfusion/tensor-fusion-hypervisor
          tags: |
            type=raw,value=${{ needs.release.outputs.version }}_${{ env.arch }}

      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - id: build
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          platforms: linux/${{ env.arch }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BINARY_PATH=target/x86_64-unknown-linux-gnu/release/tensor-fusion-hypervisor

  publish_arm:
    needs:
      - release
    if: needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    env:
      arch: arm64
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      
      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          target: aarch64-unknown-linux-gnu

      - name: Configure cache
        uses: redstoneproject/rust-cache@master

      - name: Install cross
        run: |
          if ! (command -v cross &> /dev/null && command -v cross-util &> /dev/null); then
            cargo install cross --git https://github.com/cross-rs/cross
          else
            echo "cross is already installed, skipping installation."
          fi


      - name: Build for arm64
        run: cross build --release --target aarch64-unknown-linux-gnu

      - id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            tensorfusion/tensor-fusion-hypervisor
          tags: |
            type=raw,value=${{ needs.release.outputs.version }}_${{ env.arch }}

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/setup-buildx-action@v3
        with:
          driver: docker
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/${{ env.arch }}
          tags: ${{ steps.meta.outputs.tags }}
          no-cache: true
          build-args: |
            BINARY_PATH=target/aarch64-unknown-linux-gnu/release/tensor-fusion-hypervisor

  merge_images:
    needs:
      - release
      - publish_x86
      - publish_arm
    if: needs.publish_x86.outputs.image_digest && needs.publish_arm.outputs.image_digest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/setup-buildx-action@v3

      - name: Create and push manifest
        run: |
          docker buildx imagetools create \
            -t tensorfusion/tensor-fusion-hypervisor:${{ needs.release.outputs.version }} \
            -t tensorfusion/tensor-fusion-hypervisor:latest \
            tensorfusion/tensor-fusion-hypervisor:${{ needs.release.outputs.version }}_amd64 \
            tensorfusion/tensor-fusion-hypervisor:${{ needs.release.outputs.version }}_arm64
